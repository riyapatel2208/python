---------------------regular expression

import re

# Sample text containing emails and phone numbers
text = """
Contact me at john.doe@example.com or support@company.co.uk. 
You can also reach me at johndoe123@gmail.com. 
My alternate number is +1-800-555-1234, or just call my mobile at (987) 654-3210.
For WhatsApp, use +91 98765 43210 or 9876543210.
Business line: 020-7946-0958, Office: +44 20 7946 0958
"""

# Regex for emails
email_regex = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'

# Regex for phone numbers (handles international, local, and different separators)
phone_regex = r'\+?\d{1,3}[-.\s]?\(?\d{1,4}\)?[-.\s]?\d{2,4}[-.\s]?\d{2,4}[-.\s]?\d{1,9}'

# Find all matches
emails = re.findall(email_regex, text)
phones = re.findall(phone_regex, text)

# Print results
print("Extracted Emails:")
for email in emails:
    print(email)

print("\nExtracted Phone Numbers:")
for phone in phones:
    print(phone)


-------------------simple program for ph.no----------------------------
phone_regex = r'^\+?[1-9]\d{0,2}[-.\s]?\d{10}$'
phone = "+91 9876543210"

if re.match(phone_regex, phone):
    print("Valid Phone Number")
else:
    print("Invalid Phone Number")
******************************
^ → Start of the string

\+? → Optional + sign for international numbers

[1-9]\d{0,2} → Matches country code (1 to 3 digits, cannot start with 0)

[-.\s]? → Allows an optional separator (-, . or space)

\d{10} → Matches a 10-digit phone number

$ → End of the string
---------------------------------------------------for email
import re

email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
email = "example@gmail.com"

if re.match(email_regex, email):
    print("Valid Email")
else:
    print("Invalid Email")


*****************************
Explanation:

^ → Start of the string

[a-zA-Z0-9._%+-]+ → Matches the username part (letters, numbers, dots, underscores, %, +, and -)

@ → Requires the @ symbol

[a-zA-Z0-9.-]+ → Matches the domain name (letters, numbers, dots, and hyphens)

\. → Requires a dot before the domain extension

[a-zA-Z]{2,} → Matches domain extensions like .com, .org, .net, etc. (at least 2 letters)

$ → End of the string
